package com.brelequin.pruebadeconceptos.services;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;

import org.apache.commons.lang3.time.DateUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.brelequin.pruebadeconceptos.model.PayoutReportRequestDTO;

import mx.openpay.report.client.ReportServiceClient;
import mx.openpay.report.client.ReportServiceRestClient;
import mx.openpay.report.configuration.ReportServiceConfig;
import mx.openpay.report.request.Filter;
import mx.openpay.report.request.MailCredentialRequest;
import mx.openpay.report.request.MailRecipient;
import mx.openpay.report.request.MailTemplate;
import mx.openpay.report.request.ReportRequest;
import mx.openpay.report.request.S3Settings;
import mx.openpay.report.util.FileType;
import mx.openpay.report.util.Plugin;


@Service
public class ReportService {
	
	@Value("${cognito.server}")
	private String cognitoServer;
	
	@Value("${cognito.user}")
	private String cognitoUser;

	@Value("${cognito.password}")
	private String cognitoPassword;
	
	@Value("${kms.key.id}")
	private String kmsId;
	
	@Value("${application.code}")
	private String applicationCode;

	public ReportService() {
		
	}
	
	//@Singleton
	public ReportServiceClient getReportServiceClient() {
    	return new ReportServiceRestClient(ReportServiceConfig.builder()
            	.cognitoServer(cognitoServer)
            	.cognitoUser(cognitoUser)
            	.cognitoPassword(cognitoPassword)
            	.kmsKeyId(kmsId)
            	.build());
	}
	
	
	private ReportRequest getReportRequest(PayoutReportRequestDTO reportRequest, String email, String name){
		
		   CountryConfigDTO countryConfig = countryConfigService.getCountryConfig(reportRequest.getCountry());
		   Filter filter = getReportFilter(reportRequest, email, countryConfig.getTimezone());
		   S3Settings s3Settings = getS3Settings(reportRequest.getReportType(), countryConfig.getTimezone());
		   MailCredentialRequest mailCredentialRequest =
		           getReportEmail(reportRequest.getReportType(), email, name);


		   return ReportRequest.builder()
		           .keycodeBd(countryConfig.getReporterServiceDB())
		           .pluginName(Plugin.DYNAMIC)
		           .filter(filter)
		           .fileType(FileType.CSV)
		           .separator(null)
		           .s3CredentialRequest(s3Settings)
		           .mailCredentialRequest(mailCredentialRequest)
		           .build();
		}


private Filter getReportFilter(PayoutReportRequestDTO reportRequest, String email, String timezone){

    String title = "My title";

   // df.setTimeZone(TimeZone.getTimeZone(timezone));
return Filter.builder()
       .titleTemplate(title)
       .descriptionTemplate(String.format(null))
       .footerTemplateText(df.format(DateUtils.addDays(new Date(), 1)))
       .email(email)
       .queryStatement(getQuery(reportRequest.getReportType(),
               reportRequest.getPayoutId(), reportRequest.getPayoutMerchantId(),
               reportRequest.getCountry()))
       .merchantId(reportRequest.getPublicMerchantId())
       .applicationCode(null)
       .build();

}

private S3Settings getS3Settings(String type){

    String filename = "My file name";

    return S3Settings.builder()
            .bucket(null)
            .path(null)
            .fileName(filename)
            .build();
}

private MailCredentialRequest getReportEmail(String type, String email, String name){

    String subject = "My subject";
    List<MailRecipient> mailRecipients = new ArrayList<>();
    mailRecipients.add(MailRecipient.builder()
            .email(email)
            .name(name).build());

    MailTemplate mailTemplate = MailTemplate.builder()
            .bucketName(null)
            .name(null).build();

    return MailCredentialRequest.builder()
            .to(mailRecipients)
            .subject(subject)
            .template(mailTemplate)
            .prefix("mx")
            .build();
}

private String getQuery(){
       final String MY_QUERY = "SELECT * FROM TRANSACTIONS t ORDER BY t.ID_TRANSACTION DESC LIMIT 5;"; 
   return  MY_QUERY;
}


}
