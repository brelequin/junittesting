package com.example.junittesting;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.mockito.Mockito.when;import java.util.ArrayList;import java.util.List;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import com.example.junittesting.models.Course;import com.example.junittesting.models.Student;import com.example.junittesting.services.CourseService;import com.example.junittesting.services.repository.CourseRepository;

public class CourseTest {		List<Course> coursesMty;		@Mock	CourseRepository courseRepository;		@InjectMocks	CourseService courseService;		List<Student> students;		List<Course> courses;		@BeforeEach	public void init() {		List<Student> studentsMty = new ArrayList<>();		courses= new ArrayList<>();				studentsMty = new ArrayList<>();		studentsMty.add(new Student(1,"Brenda","Monterrey"));		studentsMty.add(new Student(1,"Carlos","Monterrey"));		studentsMty.add(new Student(1,"Luis","Monterrey"));				List<Student> studentsApo = new ArrayList<>();		studentsApo.add(new Student(1,"Bere","Apodaca"));		List<Student> studentsSan = new ArrayList<>();		studentsSan.add(new Student(1,"Pedro","San Nicolas"));				students = new ArrayList<>();		students.addAll(studentsMty);		students.addAll(studentsApo);		students.addAll(studentsSan);				courses.add(new Course(1,"Ortografía","Español", studentsMty));		courses.add(new Course(1,"2da guerra mundial","Historia", studentsMty));		courses.add(new Course(1,"Algebra","Matematicas", studentsMty));		courses.add(new Course(1,"Integrales","Matematicas", studentsApo));				MockitoAnnotations.initMocks(this);				//cuando se manda a llamar el findallstudent se injecta los estudiante que inicializé		//when(courseService.findCoursesByStudentCity("Monterrey")).thenReturn(coursesMty);			}		@Test	public void findCoursesByCity() {				List<Course> co= courseService.filterCoursesByStudentCity(courses, "Monterrey");		assertEquals(3, co.size());	}		@Test	public void findCoursesBySubject() {				List<Course> co = courseService.filterCoursesBySubject(courses,"Matematicas");		assertEquals(2, co.size());	}		@Test	public void findCoursesByAmountOfStudents() {				List<Course> co = courseService.filterCoursesByAmountOfStudents(courses,3);		assertEquals(3, co.size());	}	

}
